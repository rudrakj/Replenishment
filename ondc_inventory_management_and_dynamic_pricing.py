# -*- coding: utf-8 -*-
"""ONDC-Inventory Management and Dynamic Pricing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1apuuvGx2bAebjKIihXyHFwIptUgFQ-w6
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math
import warnings

warnings.filterwarnings('ignore')

"""## Parameters

### Functions
"""

# Deterministic constant demand
def demand(D):
  
    return D

# Order every cycle time
def order(t, T, Q):
    # Reorder when t = 1 + k x T 
    if ((t-1) % T)==0 or (t==1): #((t-1) % T)==0
        result = Q
    else:
        result = 0
    return result

# Simulation version 1: with leadtime uncompensated
def sim(Q, T, D_day, T_total, LD):
    df_sim = pd.DataFrame({'time': np.array(range(1, T_total+1))})
    # Demand Function
    df_sim['demand'] = df_sim['time'].apply(lambda t: demand(D_day))
    # Order Function
    df_sim['order'] = df_sim['time'].apply(lambda t: order(t, T, Q))
    # Inventory on Hand = Order - Demand
    df_sim['ioh'] = df_sim['order'].cumsum().shift(LD) - df_sim['demand'].cumsum()

    # Inventory on Hand: Add extra records for the replenishment time at t = k x T - LD (for visualisation)
    df_simp = df_sim[df_sim['time'].apply(lambda t: ((t-LD) % T)==0 and (t!=0 + LD))]
    df_simp['ioh'] = df_simp['ioh'] + Q
    df_sim = pd.concat([df_sim, df_simp]).sort_values(['time', 'ioh'], ascending= [True, True])
    
    # Print Results
    print("Demand during cycle time: {:,} units".format(round(D_day * T, 2)))
    print("Average IOH for {:,} days cycle time: {:,} units".format(T, round(df_sim['ioh'].mean(),2)))
    return df_sim

"""---

## Initial Rule
#### Parameters
"""

# Total Demand (units/year)
D = 2000
# Total Time (days)
T_total = 365
# Demand per day (unit/day)
D_day = D/T_total
# Cost of product ($/unit)
c = 50
# Cost of placing an order ($/order)
c_t = 500
# Holding Cost (% unit cost per year)
h = .25
c_e = h * c
# Selling Price ($/unit)
p = 75
# Lead Time between ordering and receiving
LD = 0
# Replenishment Period
T = 10
# Order Quantity 1: 0 stock
Q = D_day * T
# Cost of shortage ($/unit)
c_s = 12

"""#### Simulation"""

print("LD = {:,} days".format(LD))
df_sim1 = sim(Q, T, D_day, T_total, LD)

"""#### Plot"""

# Plot
figure, axes = plt.subplots(3, 1)

df_sim1.plot(figsize=(20, 12), xlim=[0,300] , x='time', y='demand', ax=axes[0], grid = True, color = 'r')
df_sim1.plot.scatter(figsize=(20, 12), xlim=[0,300], x='time', y='order', ax=axes[1], grid = True, color ='b')
df_sim1.plot(figsize=(20, 15), xlim=[0, 300], x='time', y='ioh', ax=axes[2], grid = True, color = 'g')

plt.xlabel('Time (day)')
plt.ylabel('ioh')
plt.xticks(rotation=90)

plt.show()